def excludeApp = false
def proFile = file("./upload.properties")
if (proFile != null) {
    Properties p = new Properties()
    try {
        proFile.withInputStream { stream ->
            p.load(stream)
        }
        excludeApp = p.excludeApp
    } catch (e) {
    }
}
if (!excludeApp) {
//    "./publish.sh".execute().waitForProcessOutput(System.out, System.err)
    include ':example'
}

//common
include ':base-plugin'
include ':common'
include ':TransformEngine'
include ':HookProguard'
include ':ProguardConfigurationResolver'
include ':ProguardConfigurationResolver-task'
include ':ProguardConfigurationResolver-transform'
project(':ProguardConfigurationResolver').projectDir = new File('HookProguard/ProguardConfigurationResolver')
project(':ProguardConfigurationResolver-task').projectDir = new File('HookProguard/ProguardConfigurationResolver/task')
project(':ProguardConfigurationResolver-transform').projectDir = new File('HookProguard/ProguardConfigurationResolver/transform')
include ':GradleToolKit'
include ':GradleEnvApi'
project(':GradleEnvApi').projectDir = new File('GradleToolKit/GradleEnvApi')
include ':PluginConfigProcessor'
project(':PluginConfigProcessor').projectDir = new File('PluginConfig/PluginConfigProcessor')
include ':PluginConfigAnnotation'
project(':PluginConfigAnnotation').projectDir = new File('PluginConfig/PluginConfigAnnotation')

//opensource
include ':getter-setter-inline-plugin'
include ':method-trace-plugin'
include ':thread-transform-plugin'
include ':booster-android-instrument-thread'

//pull request